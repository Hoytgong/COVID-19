library(dplyr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(ggthemes)
options(scipen = 999)
pi <- read.csv('coronavirusdataset/patientinfo.csv', na.strings=c("","NA"))
library(dplyr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(ggthemes)
options(scipen = 999)
ori_data <- read.csv('coronavirusdataset/patientinfo.csv', na.strings=c("","NA"))
## Cleaning
pi <- transform(ori_data, patient_id = as.numeric(patient_id),
infected_by = as.numeric(infected_by),
sex = as.factor(sex),
country = as.factor(country),
province = as.factor(province),
city = as.factor(city),
infection_case = as.factor(infection_case),
state = as.factor(state),
symptom_onset_date = as.Date(symptom_onset_date),
confirmed_date = as.Date(confirmed_date),
released_date = as.Date(released_date),
deceased_date = as.Date(deceased_date),
age = as.factor(age)) %>%
select(-global_num, -birth_year, -country) %>%
drop_na(state, age, sex, confirmed_date) %>% # remove NAs of key variables for prediction
unite("outcome_date", released_date:deceased_date, remove = TRUE) # unite released_date and deceased_date
## Clean NA values in outcome_date united column
pi$outcome_date <- gsub("_NA", "", pi$outcome_date)
pi$outcome_date <- gsub("NA_", "", pi$outcome_date)
pi$outcome_date <- gsub("NA", NA, pi$outcome_date)
pi <- pi %>% transform(outcome_date = as.Date(outcome_date))
test = pi %>% filter(state == "deceased")
pi <- pi %>% mutate(days_passed = as.numeric(outcome_date - confirmed_date))
summary(pi)
sapply(pi,class)
colSums(is.na(pi))
View(test)
View(pi)
# Cases per province bar chart
ggplot(pi, aes(x=province, fill = state)) + geom_bar(position="dodge") + ggtitle("Count of Cases per Province") +
xlab("Province") + ylab("Count")  + theme_light() + theme(axis.text.x = element_text(angle = 90)) + coord_flip()
# Cases of age categories bar chart
ggplot(pi, aes(x=age, fill = state)) + geom_bar(position="stack") + ggtitle("Age Distribution of Cases") +
xlab("Age") + ylab("Count") + theme_light()
## Train test split
index <- sample(1:nrow(pi), nrow(pi)*0.8, replace=F)
train <- pi[index,]
test <- pi[-index,]
## Model building
library(ranger)
library(rpart)
library(rpart.plot)
library(pROC)
DT_model <- rpart(state ~ sex + age + province + confirmed_date, train, method = "class")
rpart.plot(DT_model, extra=104)
RF_model <- ranger(state ~ sex + age + province + confirmed_date, train, mtry=2, num.trees = 250, splitrule = "gini",importance = "impurity")
RF.pred <-predict(RF_model, test, type = "response")
RF.test.error <- mean(test$state!=RF.pred$predictions)
fitRF.roc <-roc(test$state, as.numeric(RF.pred$predictions))
#summary(pi)
#sapply(pi,class)
colSums(is.na(pi))
test = pi %>% filter(disease != NA)
View(test)
test = pi %>% filter(!is.na(disease))
View(test)
test = pi %>% filter(state == "deceased")
View(test)
?inelse
?ifelse
## Repurposing to classifcation problem with binary 'Death' state
pi <- pi %>% mutate(death_outcome = ifelse(state == "deceased", 1, 0))
View(pi)
test = pi %>% filter(state == "deceased")
View(test)
library(dplyr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(ggthemes)
options(scipen = 999)
ori_data <- read.csv('coronavirusdataset/patientinfo.csv', na.strings=c("","NA"))
## Cleaning
pi <- transform(ori_data, patient_id = as.numeric(patient_id),
infected_by = as.numeric(infected_by),
sex = as.factor(sex),
country = as.factor(country),
province = as.factor(province),
city = as.factor(city),
infection_case = as.factor(infection_case),
state = as.factor(state),
symptom_onset_date = as.Date(symptom_onset_date),
confirmed_date = as.Date(confirmed_date),
released_date = as.Date(released_date),
deceased_date = as.Date(deceased_date),
age = as.factor(age)) %>%
select(-global_num, -birth_year, -country) %>%
drop_na(state, age, sex, confirmed_date) %>% # remove NAs of key variables for prediction
unite("outcome_date", released_date:deceased_date, remove = TRUE) # unite released_date and deceased_date
## Clean NA values in outcome_date united column
pi$outcome_date <- gsub("_NA", "", pi$outcome_date)
pi$outcome_date <- gsub("NA_", "", pi$outcome_date)
pi$outcome_date <- gsub("NA", NA, pi$outcome_date)
pi <- pi %>% transform(outcome_date = as.Date(outcome_date))
## Feature engineering
pi <- pi %>% mutate(days_passed = as.numeric(outcome_date - confirmed_date))
## Repurposing to classifcation problem with binary 'Death' state
pi <- pi %>% mutate(death_outcome = ifelse(state == "deceased", 1, 0)) %>% select(-state)
#test_death = pi %>% filter(state == "deceased")
#summary(pi)
#sapply(pi,class)
colSums(is.na(pi))
View(pi)
View(pi)
#summary(pi)
#sapply(pi,class)
colSums(is.na(pi))
DT_model <- rpart(state ~ sex + age + province + confirmed_date, train, method = "class")
## Train test split
index <- sample(1:nrow(pi), nrow(pi)*0.8, replace=F)
train <- pi[index,]
test <- pi[-index,]
## Model building
library(ranger)
library(rpart)
library(rpart.plot)
library(pROC)
DT_model <- rpart(state ~ sex + age + province + confirmed_date, train, method = "class")
# Logit model
logit_model <- glm(death_outcome ~ sex + age + province + confirmed_date, train, family=binomial(logit))
summary(fit1, results=TRUE)
summary(logit_model, results=TRUE)
library(dplyr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(ggthemes)
options(scipen = 999)
ori_data <- read.csv('coronavirusdataset/patientinfo.csv', na.strings=c("","NA"))
## Cleaning
pi <- transform(ori_data, patient_id = as.numeric(patient_id),
infected_by = as.numeric(infected_by),
sex = as.factor(sex),
country = as.factor(country),
province = as.factor(province),
city = as.factor(city),
infection_case = as.factor(infection_case),
state = as.factor(state),
symptom_onset_date = as.Date(symptom_onset_date),
confirmed_date = as.Date(confirmed_date),
released_date = as.Date(released_date),
deceased_date = as.Date(deceased_date),
age = as.factor(age)) %>%
select(-global_num, -birth_year, -country) %>%
drop_na(state, age, sex, confirmed_date) %>% # remove NAs of key variables for prediction
unite("outcome_date", released_date:deceased_date, remove = TRUE) # unite released_date and deceased_date
## Clean NA values in outcome_date united column
pi$outcome_date <- gsub("_NA", "", pi$outcome_date)
pi$outcome_date <- gsub("NA_", "", pi$outcome_date)
pi$outcome_date <- gsub("NA", NA, pi$outcome_date)
pi <- pi %>% transform(outcome_date = as.Date(outcome_date))
## Feature engineering
pi <- pi %>% mutate(days_passed = as.numeric(outcome_date - confirmed_date))
## Repurposing to classifcation problem with binary 'Death' state, 0 = alive, 1 = deceased
pi <- pi %>% mutate(death_outcome = ifelse(state == "deceased", 1, 0))
#test_death = pi %>% filter(state == "deceased")
#summary(pi)
#sapply(pi,class)
colSums(is.na(pi))
# Cases per province bar chart
ggplot(pi, aes(x=province, fill = state)) + geom_bar(position="dodge") + ggtitle("Count of Cases per Province") +
xlab("Province") + ylab("Count")  + theme_light() + theme(axis.text.x = element_text(angle = 90)) + coord_flip()
# Cases of age categories bar chart
ggplot(pi, aes(x=age, fill = state)) + geom_bar(position="stack") + ggtitle("Age Distribution of Cases") +
xlab("Age") + ylab("Count") + theme_light()
## Train test split
index <- sample(1:nrow(pi), nrow(pi)*0.8, replace=F)
train <- pi[index,]
test <- pi[-index,]
par(1,2)
par(1,2)
# Cases per province bar chart
ggplot(pi, aes(x=province, fill = state)) + geom_bar(position="dodge") + ggtitle("Count of Cases per Province") +
xlab("Province") + ylab("Count")  + theme_light() + theme(axis.text.x = element_text(angle = 90)) + coord_flip()
# Cases of age categories bar chart
ggplot(pi, aes(x=age, fill = state)) + geom_bar(position="stack") + ggtitle("Age Distribution of Cases") +
xlab("Age") + ylab("Count") + theme_light()
par(mfrow=c(1,2))
# Cases per province bar chart
ggplot(pi, aes(x=province, fill = state)) + geom_bar(position="dodge") + ggtitle("Count of Cases per Province") +
xlab("Province") + ylab("Count")  + theme_light() + theme(axis.text.x = element_text(angle = 90)) + coord_flip()
# Cases of age categories bar chart
ggplot(pi, aes(x=age, fill = state)) + geom_bar(position="stack") + ggtitle("Age Distribution of Cases") +
xlab("Age") + ylab("Count") + theme_light()
par(mfrow=c(2,1))
# Cases per province bar chart
ggplot(pi, aes(x=province, fill = state)) + geom_bar(position="dodge") + ggtitle("Count of Cases per Province") +
xlab("Province") + ylab("Count")  + theme_light() + theme(axis.text.x = element_text(angle = 90)) + coord_flip()
# Cases of age categories bar chart
ggplot(pi, aes(x=age, fill = state)) + geom_bar(position="stack") + ggtitle("Age Distribution of Cases") +
xlab("Age") + ylab("Count") + theme_light()
par(mfrow=c(1,2))
ggplot(pi, aes(x=province, fill = state)) + geom_bar(position="dodge") + ggtitle("Count of Cases per Province") +
xlab("Province") + ylab("Count")  + theme_light() + theme(axis.text.x = element_text(angle = 90)) + coord_flip()
ggplot(pi, aes(x=age, fill = state)) + geom_bar(position="stack") + ggtitle("Age Distribution of Cases") +
xlab("Age") + ylab("Count") + theme_light()
# Cases per province bar chart
# Cases of age categories bar chart
install.packages("cowplot")
library(cowplot)
A <- ggplot(pi, aes(x=province, fill = state)) + geom_bar(position="dodge") + ggtitle("Count of Cases per Province") +
xlab("Province") + ylab("Count")  + theme_light() + theme(axis.text.x = element_text(angle = 90)) + coord_flip()
B <- ggplot(pi, aes(x=age, fill = state)) + geom_bar(position="stack") + ggtitle("Age Distribution of Cases") +
xlab("Age") + ylab("Count") + theme_light()
plot_grid(plot1, plot2, labels = "AUTO")
library(cowplot)
A <- ggplot(pi, aes(x=province, fill = state)) + geom_bar(position="dodge") + ggtitle("Count of Cases per Province") +
xlab("Province") + ylab("Count")  + theme_light() + theme(axis.text.x = element_text(angle = 90)) + coord_flip()
B <- ggplot(pi, aes(x=age, fill = state)) + geom_bar(position="stack") + ggtitle("Age Distribution of Cases") +
xlab("Age") + ylab("Count") + theme_light()
plot_grid(A, B, labels = "AUTO")
require(gridExtra)
A <- ggplot(pi, aes(x=province, fill = state)) + geom_bar(position="dodge") + ggtitle("Count of Cases per Province") +
xlab("Province") + ylab("Count")  + theme_light() + theme(axis.text.x = element_text(angle = 90)) + coord_flip()
B <- ggplot(pi, aes(x=age, fill = state)) + geom_bar(position="stack") + ggtitle("Age Distribution of Cases") +
xlab("Age") + ylab("Count") + theme_light()
grid.arrange(A, B, ncol=2)
# Cases per province bar chart
ggplot(pi, aes(x=province, fill = state)) + geom_bar(position="dodge") + ggtitle("Count of Cases per Province") +
xlab("Province") + ylab("Count")  + theme_light() + theme(axis.text.x = element_text(angle = 90)) + coord_flip()
# Cases of age categories bar chart
ggplot(pi, aes(x=age, fill = state)) + geom_bar(position="stack") + ggtitle("Age Distribution of Cases") +
xlab("Age") + ylab("Count") + theme_light()
## Train test split
index <- sample(1:nrow(pi), nrow(pi)*0.8, replace=F)
train <- pi[index,]
test <- pi[-index,]
## Model building
library(ranger)
library(rpart)
library(rpart.plot)
library(pROC)
# Logit model
logit_model <- glm(death_outcome ~ sex + age + province + confirmed_date, train, family=binomial(logit))
summary(logit_model, results=TRUE)
# Decision Tree model
DT_model <- rpart(death_outcome ~ sex + age + province + confirmed_date, train, method = "class")
rpart.plot(DT_model, extra=104)
# Random Forest model
RF_model <- ranger(state ~ sex + age + province + confirmed_date, train, mtry=2, num.trees = 250, splitrule = "gini",importance = "impurity")
RF.pred <-predict(RF_model, test, type = "response")
RF.test.error <- mean(test$state!=RF.pred$predictions)
fitRF.roc <-roc(test$state, as.numeric(RF.pred$predictions))
summary(logit_model, results=TRUE)
# Logit model
logit_model <- glm(state ~ sex + age + province + confirmed_date, train, family=binomial(logit))
summary(logit_model, results=TRUE)
# Logit model
logit_model <- glm(death_outcome ~ sex + age + province + confirmed_date, train, family=binomial(logit))
summary(logit_model, results=TRUE)
# Decision Tree model
DT_model <- rpart(death_outcome ~ sex + age + province + confirmed_date, train, method = "class")
e
rpart.plot(DT_model, extra=104)
# Logit model
logit_model <- glm(death_outcome ~ sex + age + province + confirmed_date, train, family=binomial(logit))
summary(logit_model, results=TRUE)
Anova(logit_model)
library(car)
Anova(logit_model)
# Random Forest model
RF_model <- ranger(state ~ sex + age + province + confirmed_date, train, mtry=2, num.trees = 250, splitrule = "gini",importance = "impurity")
RF.pred <-predict(RF_model, test, type = "response")
RF.test.error <- mean(test$state!=RF.pred$predictions)
fitRF.roc <-roc(test$state, as.numeric(RF.pred$predictions))
# Random Forest model
RF_model <- ranger(death_outcome ~ sex + age + province + confirmed_date, train, mtry=2, num.trees = 250, splitrule = "gini",importance = "impurity")
# Random Forest model
train <- train %>% transform(death_outcome = as.factor(death_outcome))
RF_model <- ranger(death_outcome ~ sex + age + province + confirmed_date, train, mtry=2, num.trees = 250, splitrule = "gini",importance = "impurity")
RF.pred <-predict(RF_model, test, type = "response")
RF.test.error <- mean(test$death_outcome!=RF.pred$predictions)
library(dplyr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(ggthemes)
options(scipen = 999)
ori_data <- read.csv('coronavirusdataset/patientinfo.csv', na.strings=c("","NA"))
